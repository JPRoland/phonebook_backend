{"version":3,"sources":["Components/Persons.js","Components/PersonForm.js","Components/Filter.js","Components/Notification.js","services/personService.js","App.js","serviceWorker.js","index.js"],"names":["Persons","persons","handleDeletePerson","map","person","key","name","number","onClick","e","window","confirm","id","PersonForm","props","onSubmit","addPerson","onChange","handleNameChange","value","newName","handleNumberChange","newNumber","type","Filter","handleFilterChange","searchTerm","placeholder","Notification","message","errFlag","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","baseUrl","axios","get","then","response","data","newPerson","post","personId","delete","newObject","put","App","useState","setPersons","setNewName","setNewNumber","setSearchTerm","filteredPersons","setFilteredPersons","errorMessage","setErrorMessage","setErrorFlag","useEffect","personService","people","results","filter","p","toLowerCase","includes","event","target","preventDefault","personObj","some","find","concat","setTimeout","catch","err","error","res","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd1cf89f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Persons = ({ persons, handleDeletePerson }) => (\n    <div>\n        <ul>\n            {persons.map(person => <li key={person.name}>\n                {person.name} {person.number}\n                <button onClick={(e) => {\n                    if (window.confirm('Are you sure you want to delete this person?')) {\n                        handleDeletePerson(e, person.id)\n                    }\n                }}>Delete</button>\n            </li>)}\n        </ul>\n    </div>\n)\n\nexport default Persons","import React from 'react';\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addPerson}>\n            <div>\n                name: <input onChange={props.handleNameChange} value={props.newName} />\n            </div>\n            <div>\n                number: <input onChange={props.handleNumberChange} value={props.newNumber} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react';\n\nconst Filter = ({ handleFilterChange, searchTerm }) => (\n    <div>\n        <input onChange={handleFilterChange} value={searchTerm} placeholder=\"Search\" />\n    </div>\n)\n\nexport default Filter","import React from 'react';\n\nconst Notification = ({ message, errFlag }) => {\n    const errorStyle = {\n        color: 'red',\n        background: 'lightgrey',\n        fontSize: '20px',\n        borderStyle: 'solid',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n    }\n\n    const successStyle = {\n        color: 'green',\n        background: 'lightgrey',\n        fontSize: '20px',\n        borderStyle: 'solid',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n    }\n\n    if (message == null) {\n        return null\n    }\n\n    return (\n        <div style={errFlag ? errorStyle : successStyle}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst updatePerson = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst create = newPerson => {\n    const request = axios.post(baseUrl, newPerson)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = personId => {\n    return axios.delete(`${baseUrl}/${personId}`)\n}\n\nexport default { getAll, create, deletePerson, updatePerson }","import React, { useState, useEffect } from 'react'\nimport Persons from './Components/Persons'\nimport PersonForm from './Components/PersonForm'\nimport Filter from './Components/Filter'\nimport Notification from './Components/Notification'\nimport personService from './services/personService'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filteredPersons, setFilteredPersons] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [errFlag, setErrorFlag] = useState(false)\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObj = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.some(person => person.name === newName)) {\n      if (window.confirm(`${newName} already exists, replace the old number with a new one?`)) {\n        const id = persons.find(p => p.name === newName).id\n        personService\n          .updatePerson(id, { name: newName, number: newNumber })\n          .then(person => {\n            setPersons(persons.filter(p => p.id !== id).concat(person))\n            setNewNumber('')\n            setNewName('')\n            setErrorFlag(false)\n            setErrorMessage(`Updated ${person.name}'s number`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n      }\n      return\n    }\n\n    personService\n      .create(personObj)\n      .then(person => {\n        setPersons(persons.concat(person))\n        setNewNumber('')\n        setNewName('')\n        setErrorFlag(false)\n        setErrorMessage(`Added ${person.name}`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      .catch(err => {\n        setErrorFlag(true)\n        setErrorMessage(err.response.data.error)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  const handleDeletePerson = (event, id) => {\n    event.preventDefault()\n    const person = persons.find(p => p.id === id)\n    personService.deletePerson(id)\n      .then(res => {\n        setPersons(persons.filter(p => p.id !== id))\n        setErrorFlag(true)\n        setErrorMessage(`Deleted information for ${person.name}`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      .catch(err => {\n        console.log(err)\n        setErrorFlag(true)\n        setErrorMessage(`${person.name} has already been removed from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setSearchTerm(event.target.value)\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(people => setPersons(people))\n  }, [])\n\n  useEffect(() => {\n    const results = persons.filter(p => p.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredPersons(results)\n  }, [searchTerm, persons])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={errorMessage} errFlag={errFlag} />\n      <Filter handleFilterChange={handleFilterChange} searchTerm={searchTerm} />\n\n      <h3>Add a new</h3>\n      <PersonForm\n        addPerson={addPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber} />\n\n      <h2>Numbers</h2>\n\n      <Persons persons={filteredPersons} handleDeletePerson={handleDeletePerson} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}